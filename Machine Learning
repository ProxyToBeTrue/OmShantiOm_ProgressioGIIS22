Importing libraries into the code
import os
import numpy as np
import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
Using pandas to open our csv files
df=pd.read_csv('Anime_Top10000.csv')
df
Setting the index of Anime_Name Column [ In order to justify the index of the operation ] ( This enables the code to be processed easily )
indices = pd.Series(df.index, index = df['Anime_Name'])
Using TF-IDF and Vectorisers to ensure similarity between intended index . Reduces general mistake probability

tfidf = TfidfVectorizer(stop_words='english')
tfidf2 = TfidfVectorizer(stop_words='english')
count = CountVectorizer(stop_words='english')

tfidf_matrix = tfidf.fit_transform(df['Anime_Name'])
count_matrix = count.fit_transform(df['Anime_Episodes'])
tfidf2_matrix = tfidf2.fit_transform(df['Synopsis'])

name_similarity = cosine_similarity(tfidf_matrix)
genre_similarity = cosine_similarity(count_matrix)
synopsis_similarity = cosine_similarity(tfidf2_matrix)

Using Indices to form a genre score / name source and a cleaned synopsis source . Note : The synopsis has been cleaned by removing discrepancies in 
def get_anime(anime):
    i = indices[anime]
    
    name_score = list(enumerate(name_similarity[i]))
    genre_score = list(enumerate(genre_similarity[i]))
    synopsis_score = list(enumerate(synopsis_similarity[i]))
    
    name_score = sorted(name_score, key = lambda x: x[0])
    genre_score = sorted(genre_score, key = lambda x: x[0])
    synopsis_score = sorted(synopsis_score, key = lambda x: x[0])
    
    combined_score = [(i, (sc_1 + sc_2 + sc_3) / 3) for (i, sc_1), (_, sc_2), (_, sc_3) in zip(name_score, genre_score, synopsis_score)]
    
    combined_score = sorted(combined_score, key = lambda x: x[1], reverse = True)
    
    anime_ids = [i[0] for i in combined_score[1:11]]
    
    anime_recs = []
    
    index = 0
    while len(anime_recs) != 10:
        anime_id = combined_score[1:][index][0]
        index += 1
        if anime in indices.iloc[[anime_id]].index[0]:
            continue
        else:
            anime_recs.append(indices.iloc[[anime_id]].index[0])
            
            
    
    
    print(f'If you liked {anime}, you should try:')
    for i, v in list(enumerate(anime_recs)):
        print(f'{i + 1}. {v}')
        

